{"version":3,"file":"index.esm.js","sources":["../src/show.tsx","../src/switch.tsx","../src/dynamic.tsx","../src/for.tsx"],"sourcesContent":["//@ts-nocheck\nimport\n\t{\n\ttype FC,\n\tFragment,\n\ttype JSX,\n\tJSXElementConstructor,\n\tReactElement,\n\ttype ReactNode\n} from 'react'\n\nexport const Show: FC<{\n\tchildren: JSX.Element | ReactNode | string\n\twhen:\n\t\t| boolean\n\t\t| string\n\t\t| number\n\t\t| ReactElement<unknown, string | JSXElementConstructor<any>>\n\t\t| undefined\n\tfallback?: JSX.Element | string | null | ReactNode\n}> = ({ children, when, fallback }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t{when && children}\n\t\t\t{!when && fallback}\n\t\t</Fragment>\n\t)\n}\n","//@ts-nocheck\n\nimport\n\t{\n\tChildren,\n\tFC,\n\tisValidElement,\n\tJSXElementConstructor,\n\tReactElement,\n\tReactNode\n} from 'react'\ninterface MatchProps {\n\twhen:\n\t\t| boolean\n\t\t| ReactElement<unknown, string | JSXElementConstructor<any>>\n\t\t| undefined\n\tchildren: ReactNode\n}\n\nexport const Match: FC<MatchProps> = ( { when, children } ) =>\n\twhen ? <>{children}</> : null\n\ninterface SwitchProps {\n\tchildren: ReactNode\n}\n\nexport const Switch: FC<SwitchProps> = ({ children }) => {\n\tconst validCase = Children.toArray(children).find(\n\t\t(child) => isValidElement(child) && child.props.when\n\t)\n\treturn validCase || null\n}\n","//@ts-nocheck\nimport React, {\n\ttype ComponentType,\n\tisValidElement,\n\ttype JSX,\n\tJSXElementConstructor,\n\ttype ReactElement\n} from 'react'\n\ninterface DynamicProps<T = any> {\n\tcomponent:\n\t\t| ComponentType<T>\n\t\t| keyof JSX.IntrinsicElements\n\t\t| ReactElement\n\t\t| string\n\t\t| null\n\t\t| ReactElement<unknown, string | JSXElementConstructor<any>>\n\t\t| undefined // Accepts React components or HTML tags\n\t[key: string]: any // Allow additional props\n}\n\nexport const Dynamic = <T,>({\n\tcomponent: Component,\n\t...props\n}: DynamicProps<T>): JSX.Element | null => {\n\tif (!Component) return null\n\n\treturn isValidElement(Component) ? (\n\t\tReact.cloneElement(Component, props)\n\t) : (\n\t\t<Component {...(props as T)} />\n\t)\n}\n","//@ts-nocheck\nimport { Fragment, type JSX, type ReactNode } from 'react'\n\ninterface ForProps<T> {\n\teach: T[]\n\tchildren: (item: T, index: number) => ReactNode\n}\nexport const For = <T,>({ each, children }: ForProps<T>): JSX.Element => {\n\treturn (\n\t\t<Fragment>\n\t\t\t{each.map((item, index) => (\n\t\t\t\t<Fragment key={index}>{children(item, index)}</Fragment>\n\t\t\t))}\n\t\t</Fragment>\n\t)\n}\n"],"names":["_jsxs","_jsx","_Fragment"],"mappings":";;;AAWO,MAAM,IAAI,GASZ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAI;AACrC,IAAA,QACCA,IAAA,CAAC,QAAQ,EAAA,EAAA,QAAA,EAAA,CACP,IAAI,IAAI,QAAQ,EAChB,CAAC,IAAI,IAAI,QAAQ,CAAA,EAAA,CACR;AAEb;;ACRa,MAAA,KAAK,GAAmB,CAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,KACxD,IAAI,GAAGC,GAAG,CAAAC,UAAA,EAAA,EAAA,QAAA,EAAA,QAAQ,GAAI,GAAG;MAMb,MAAM,GAAoB,CAAC,EAAE,QAAQ,EAAE,KAAI;IACvD,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAChD,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CACpD;IACD,OAAO,SAAS,IAAI,IAAI;AACzB;;ACVO,MAAM,OAAO,GAAG,CAAK,EAC3B,SAAS,EAAE,SAAS,EACpB,GAAG,KAAK,EACS,KAAwB;AACzC,IAAA,IAAI,CAAC,SAAS;AAAE,QAAA,OAAO,IAAI;IAE3B,OAAO,cAAc,CAAC,SAAS,CAAC,IAC/B,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,KAEpCD,GAAC,CAAA,SAAS,EAAM,EAAA,GAAA,KAAW,EAAI,CAAA,CAC/B;AACF;;ACzBa,MAAA,GAAG,GAAG,CAAK,EAAE,IAAI,EAAE,QAAQ,EAAe,KAAiB;AACvE,IAAA,QACCA,GAAA,CAAC,QAAQ,EAAA,EAAA,QAAA,EACP,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,MACrBA,GAAC,CAAA,QAAQ,EAAc,EAAA,QAAA,EAAA,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,EAA7B,EAAA,KAAK,CAAoC,CACxD,CAAC,EAAA,CACQ;AAEb;;;;"}